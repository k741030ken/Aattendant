<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="98944f58-d755-4505-888b-ef6eda8ec8c5" name="YSHuang@ANSONHUANG 2017-05-18 09:39:21" runUser="AnsonHuang\YSHuang" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="本機" id="f0316326-3a07-479d-8058-64131c18b509">
    <Description>這些是本機測試回合的預設測試設定。</Description>
    <Execution>
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
    <Deployment runDeploymentRoot="YSHuang_ANSONHUANG 2017-05-18 09_39_21" />
  </TestSettings>
  <Times creation="2017-05-18T09:39:21.8602320+08:00" queuing="2017-05-18T09:39:25.0147320+08:00" start="2017-05-18T09:39:25.1337320+08:00" finish="2017-05-18T09:39:55.0862247+08:00" />
  <ResultSummary outcome="Completed">
    <Counters total="1" executed="1" passed="1" error="0" failed="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <WebTest name="WebTestSelectCase01" storage="d:\git\attendant\loadtesting\loadtesting\webtestselectcase01.webtest" id="a5b43290-1c44-42f1-bfa2-c60d219f5d58" persistedWebTest="">
      <Execution id="44eb46f6-a930-4820-bb6f-833ce3aa55d6" />
    </WebTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="不在清單中的結果" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="所有載入的結果" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry isTransparent="false" testId="a5b43290-1c44-42f1-bfa2-c60d219f5d58" executionId="44eb46f6-a930-4820-bb6f-833ce3aa55d6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <WebTestResult executionId="44eb46f6-a930-4820-bb6f-833ce3aa55d6" testId="a5b43290-1c44-42f1-bfa2-c60d219f5d58" testName="WebTestSelectCase01" computerName="ANSONHUANG" duration="00:00:19.1222526" startTime="2017-05-18T09:39:25.1952320+08:00" endTime="2017-05-18T09:39:55.0137102+08:00" testType="4e7599fa-5ecb-43e9-a887-cd63cf72d207" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="44eb46f6-a930-4820-bb6f-833ce3aa55d6">
      <ResultFiles>
        <ResultFile path="WebTestSelectCase01.webtestResult" />
      </ResultFiles>
      <TestSettings name="本機" id="f0316326-3a07-479d-8058-64131c18b509">
        <Description>這些是本機測試回合的預設測試設定。</Description>
        <Execution>
          <TestTypeSpecific>
            <WebTestRunConfiguration testTypeId="4e7599fa-5ecb-43e9-a887-cd63cf72d207">
              <Browser name="Internet Explorer 7.0">
                <Headers>
                  <Header name="User-Agent" value="Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)" />
                  <Header name="Accept" value="*/*" />
                  <Header name="Accept-Language" value="{{$IEAcceptLanguage}}" />
                  <Header name="Accept-Encoding" value="GZIP" />
                </Headers>
              </Browser>
            </WebTestRunConfiguration>
          </TestTypeSpecific>
          <AgentRule name="Execution Agents">
          </AgentRule>
        </Execution>
        <Deployment runDeploymentRoot="YSHuang_ANSONHUANG 2017-05-18 09_39_21" />
      </TestSettings>
      <WebTestResultFilePath>YSHuang_ANSONHUANG 2017-05-18 09_39_21\In\44eb46f6-a930-4820-bb6f-833ce3aa55d6\WebTestSelectCase01.webtestResult</WebTestResultFilePath>
    </WebTestResult>
  </Results>
</TestRun>