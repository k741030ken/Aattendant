<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="e1c8d88a-526a-4917-9f38-738d60b30975" name="YSHuang@ANSONHUANG 2017-05-17 11:28:36" runUser="AnsonHuang\YSHuang" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="本機" id="f0316326-3a07-479d-8058-64131c18b509">
    <Description>這些是本機測試回合的預設測試設定。</Description>
    <Execution>
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
    <Deployment runDeploymentRoot="YSHuang_ANSONHUANG 2017-05-17 11_28_36" />
  </TestSettings>
  <Times creation="2017-05-17T11:28:36.6479258+08:00" queuing="2017-05-17T11:28:38.5444258+08:00" start="2017-05-17T11:28:38.6319258+08:00" finish="2017-05-17T11:28:50.6154258+08:00" />
  <ResultSummary outcome="Completed">
    <Counters total="1" executed="1" passed="1" error="0" failed="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <WebTest name="WebTest1" storage="d:\git\attendant\loadtesting\loadtesting\webtest1.webtest" id="509bf166-d174-4f2a-85e0-be097631955b" persistedWebTest="">
      <Execution id="f6451554-0e78-4949-a244-68f3025cd98f" />
    </WebTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="不在清單中的結果" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="所有載入的結果" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry isTransparent="false" testId="509bf166-d174-4f2a-85e0-be097631955b" executionId="f6451554-0e78-4949-a244-68f3025cd98f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <WebTestResult executionId="f6451554-0e78-4949-a244-68f3025cd98f" testId="509bf166-d174-4f2a-85e0-be097631955b" testName="WebTest1" computerName="ANSONHUANG" duration="00:00:01.3220965" startTime="2017-05-17T11:28:38.6634258+08:00" endTime="2017-05-17T11:28:50.5949258+08:00" testType="4e7599fa-5ecb-43e9-a887-cd63cf72d207" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f6451554-0e78-4949-a244-68f3025cd98f">
      <ResultFiles>
        <ResultFile path="WebTest1.webtestResult" />
      </ResultFiles>
      <TestSettings name="本機" id="f0316326-3a07-479d-8058-64131c18b509">
        <Description>這些是本機測試回合的預設測試設定。</Description>
        <Execution>
          <TestTypeSpecific>
            <WebTestRunConfiguration testTypeId="4e7599fa-5ecb-43e9-a887-cd63cf72d207">
              <Browser name="Internet Explorer 7.0">
                <Headers>
                  <Header name="User-Agent" value="Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)" />
                  <Header name="Accept" value="*/*" />
                  <Header name="Accept-Language" value="{{$IEAcceptLanguage}}" />
                  <Header name="Accept-Encoding" value="GZIP" />
                </Headers>
              </Browser>
            </WebTestRunConfiguration>
          </TestTypeSpecific>
          <AgentRule name="Execution Agents">
          </AgentRule>
        </Execution>
        <Deployment runDeploymentRoot="YSHuang_ANSONHUANG 2017-05-17 11_28_36" />
      </TestSettings>
      <WebTestResultFilePath>YSHuang_ANSONHUANG 2017-05-17 11_28_36\In\f6451554-0e78-4949-a244-68f3025cd98f\WebTest1.webtestResult</WebTestResultFilePath>
    </WebTestResult>
  </Results>
</TestRun>