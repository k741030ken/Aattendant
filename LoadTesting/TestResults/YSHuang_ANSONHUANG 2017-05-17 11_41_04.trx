<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="79bb2d72-ecfe-4bc5-a364-f9a2f0b08b64" name="YSHuang@ANSONHUANG 2017-05-17 11:41:04" runUser="AnsonHuang\YSHuang" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="本機" id="f0316326-3a07-479d-8058-64131c18b509">
    <Description>這些是本機測試回合的預設測試設定。</Description>
    <Execution>
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
    <Deployment runDeploymentRoot="YSHuang_ANSONHUANG 2017-05-17 11_41_04" />
  </TestSettings>
  <Times creation="2017-05-17T11:41:04.4049110+08:00" queuing="2017-05-17T11:41:06.0494110+08:00" start="2017-05-17T11:41:06.2534110+08:00" finish="2017-05-17T11:46:15.4479057+08:00" />
  <ResultSummary outcome="Completed">
    <Counters total="1" executed="1" passed="0" error="0" failed="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="1" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <WebTest name="WebTestSelectCase02" storage="d:\git\attendant\loadtesting\loadtesting\webtestselectcase02.webtest" id="32b3eb7f-657d-48cc-acc9-b304c0cd482c" persistedWebTest="">
    </WebTest>
    <LoadTest Name="LoadTest2" Description="" Owner="" storage="d:\git\attendant\loadtesting\loadtesting\loadtest2.loadtest" Priority="2147483647" Enabled="true" CssProjectStructure="" CssIteration="" DeploymentItemsEditable="" WorkItemIds="" TraceLevel="None" CurrentRunConfig="回合設定1" Id="2d70237b-00f9-4804-8689-51ac87af499e">
      <Scenarios>
        <Scenario Name="情節1" DelayBetweenIterations="0" PercentNewUsers="0" IPSwitching="true" TestMixType="PercentageOfTestsStarted" ApplyDistributionToPacingDelay="true" MaxTestIterations="0" DisableDuringWarmup="false" DelayStartTime="0" AllowedAgents="">
          <ThinkProfile Value="0.2" Pattern="NormalDistribution" />
          <LoadProfile Pattern="Step" InitialUsers="25" MaxUsers="250" StepUsers="25" StepDuration="10" StepRampTime="0" />
          <TestMix>
            <TestProfile Name="WebTestInsertDeleteCase01" Path="d:\git\attendant\loadtesting\loadtesting\webtestinsertdeletecase01.webtest" Id="5bb2bc9f-0fc4-499f-9eb4-d5c514a4ffa9" Percentage="5" Type="Microsoft.VisualStudio.TestTools.WebStress.DeclarativeWebTestElement, Microsoft.VisualStudio.QualityTools.LoadTest, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
            <TestProfile Name="WebTestSelectCase01" Path="d:\git\attendant\loadtesting\loadtesting\webtestselectcase01.webtest" Id="a5b43290-1c44-42f1-bfa2-c60d219f5d58" Percentage="30" Type="Microsoft.VisualStudio.TestTools.WebStress.DeclarativeWebTestElement, Microsoft.VisualStudio.QualityTools.LoadTest, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
            <TestProfile Name="WebTestSelectCase02" Path="d:\git\attendant\loadtesting\loadtesting\webtestselectcase02.webtest" Id="32b3eb7f-657d-48cc-acc9-b304c0cd482c" Percentage="29" Type="Microsoft.VisualStudio.TestTools.WebStress.DeclarativeWebTestElement, Microsoft.VisualStudio.QualityTools.LoadTest, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
            <TestProfile Name="WebTestUpdateCase01" Path="d:\git\attendant\loadtesting\loadtesting\webtestupdatecase01.webtest" Id="d1f0dc6a-f347-4b33-8582-0a71909fcaf1" Percentage="17" Type="Microsoft.VisualStudio.TestTools.WebStress.DeclarativeWebTestElement, Microsoft.VisualStudio.QualityTools.LoadTest, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
            <TestProfile Name="WebTestUpdateCase02" Path="d:\git\attendant\loadtesting\loadtesting\webtestupdatecase02.webtest" Id="80bb2dba-dfec-42d3-a0d1-1c43eee9c35f" Percentage="19" Type="Microsoft.VisualStudio.TestTools.WebStress.DeclarativeWebTestElement, Microsoft.VisualStudio.QualityTools.LoadTest, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
          </TestMix>
          <BrowserMix>
            <BrowserProfile Percentage="100">
              <Browser Name="Internet Explorer 7.0" MaxConnections="2">
                <Headers>
                  <Header Name="User-Agent" Value="Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)" />
                  <Header Name="Accept" Value="*/*" />
                  <Header Name="Accept-Language" Value="{{$IEAcceptLanguage}}" />
                  <Header Name="Accept-Encoding" Value="GZIP" />
                </Headers>
              </Browser>
            </BrowserProfile>
          </BrowserMix>
          <NetworkMix>
            <NetworkProfile Percentage="100">
              <Network Name="LAN" BandwidthInKbps="1000000" NetworkProfileConfigurationXml="&lt;Emulation&gt;&lt;VirtualChannel name=&quot;defaultChannel&quot;&gt;&lt;FilterList/&gt;&lt;VirtualLink instances=&quot;1&quot; name=&quot;defaultLink&quot;&gt;&lt;LinkRule dir=&quot;upstream&quot;&gt;&lt;Bandwidth&gt;&lt;Speed unit=&quot;kbps&quot;&gt;1000000&lt;/Speed&gt;&lt;/Bandwidth&gt;&lt;/LinkRule&gt;&lt;LinkRule dir=&quot;downstream&quot;&gt;&lt;Bandwidth&gt;&lt;Speed unit=&quot;kbps&quot;&gt;1000000&lt;/Speed&gt;&lt;/Bandwidth&gt;&lt;/LinkRule&gt;&lt;/VirtualLink&gt;&lt;/VirtualChannel&gt;&lt;/Emulation&gt;" />
            </NetworkProfile>
          </NetworkMix>
        </Scenario>
      </Scenarios>
      <CounterSets>
        <CounterSet Name="ANSONHUANG" CounterSetType="LoadTest" LocId="">
          <CounterCategories>
            <CounterCategory Name="LoadTest:Scenario">
              <Counters>
                <Counter Name="User Load" HigherIsBetter="true" />
                <Counter Name="Tests Running" HigherIsBetter="true" />
              </Counters>
            </CounterCategory>
            <CounterCategory Name="LoadTest:Test">
              <Counters>
                <Counter Name="Total Tests" HigherIsBetter="true" />
                <Counter Name="Passed Tests" HigherIsBetter="true" />
                <Counter Name="Failed Tests" />
                <Counter Name="Tests/Sec" HigherIsBetter="true" />
                <Counter Name="Passed Tests/Sec" HigherIsBetter="true" />
                <Counter Name="Failed Tests/Sec" />
                <Counter Name="Avg. Requests/Test" HigherIsBetter="true" />
                <Counter Name="Avg. Test Time" />
                <Counter Name="% Time in LoadTestPlugin" />
                <Counter Name="% Time in WebTest code" />
                <Counter Name="% Time in Rules" />
              </Counters>
            </CounterCategory>
            <CounterCategory Name="LoadTest:Transaction">
              <Counters>
                <Counter Name="Total Transactions" HigherIsBetter="true" />
                <Counter Name="Avg. Transaction Time" />
                <Counter Name="Avg. Response Time" />
                <Counter Name="Transactions/Sec" HigherIsBetter="true" />
              </Counters>
            </CounterCategory>
            <CounterCategory Name="LoadTest:Errors">
              <Counters>
                <Counter Name="Http Errors" />
                <Counter Name="Validation Rule Errors" />
                <Counter Name="Extraction Rule Errors" />
                <Counter Name="Requests Timed Out" />
                <Counter Name="Exceptions" />
                <Counter Name="Total Errors" />
                <Counter Name="Errors/Sec" />
                <Counter Name="Threshold Violations/Sec" />
              </Counters>
            </CounterCategory>
            <CounterCategory Name="LoadTest:Page">
              <Counters>
                <Counter Name="Total Pages" HigherIsBetter="true" />
                <Counter Name="Avg. Page Time" />
                <Counter Name="Page Response Time Goal" HigherIsBetter="true" />
                <Counter Name="% Pages Meeting Goal" HigherIsBetter="true" />
                <Counter Name="Pages/Sec" HigherIsBetter="true" />
              </Counters>
            </CounterCategory>
            <CounterCategory Name="LoadTest:Request">
              <Counters>
                <Counter Name="Total Requests" HigherIsBetter="true" />
                <Counter Name="Passed Requests" HigherIsBetter="true" />
                <Counter Name="Failed Requests" />
                <Counter Name="Cached Requests" HigherIsBetter="true" />
                <Counter Name="Requests/Sec" HigherIsBetter="true" />
                <Counter Name="Passed Requests/Sec" HigherIsBetter="true" />
                <Counter Name="Failed Requests/Sec" />
                <Counter Name="Avg. First Byte Time" />
                <Counter Name="Avg. Response Time" />
                <Counter Name="Avg. Connection Wait Time">
                  <ThresholdRules>
                    <ThresholdRule Classname="Microsoft.VisualStudio.TestTools.WebStress.Rules.ThresholdRuleCompareCounters, Microsoft.VisualStudio.QualityTools.LoadTest, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
                      <RuleParameters>
                        <RuleParameter Name="DependentCategory" Value="LoadTest:Page" />
                        <RuleParameter Name="DependentCounter" Value="Avg. Page Time" />
                        <RuleParameter Name="DependentInstance" Value="_Total" />
                        <RuleParameter Name="AlertIfOver" Value="True" />
                        <RuleParameter Name="WarningThreshold" Value="0.25" />
                        <RuleParameter Name="CriticalThreshold" Value="0.5" />
                      </RuleParameters>
                    </ThresholdRule>
                  </ThresholdRules>
                </Counter>
                <Counter Name="Avg. Content Length" />
              </Counters>
            </CounterCategory>
            <CounterCategory Name="LoadTest:LogEntries">
              <Counters>
                <Counter Name="計錄檔項目總數" />
                <Counter Name="記錄檔項目/秒" />
              </Counters>
            </CounterCategory>
          </CounterCategories>
        </CounterSet>
        <CounterSet Name="控制器" CounterSetType="Controller" LocId="CounterSet_Controller">
          <CounterCategories>
            <CounterCategory Name="Memory">
              <Counters>
                <Counter Name="% Committed Bytes In Use" Range="100" />
                <Counter Name="Available MBytes" RangeGroup="Memory Bytes" HigherIsBetter="true">
                  <ThresholdRules>
                    <ThresholdRule Classname="Microsoft.VisualStudio.TestTools.WebStress.Rules.ThresholdRuleCompareConstant, Microsoft.VisualStudio.QualityTools.LoadTest">
                      <RuleParameters>
                        <RuleParameter Name="AlertIfOver" Value="False" />
                        <RuleParameter Name="WarningThreshold" Value="100" />
                        <RuleParameter Name="CriticalThreshold" Value="50" />
                      </RuleParameters>
                    </ThresholdRule>
                    <ThresholdRule Classname="Microsoft.VisualStudio.TestTools.WebStress.Rules.ThresholdRuleCompareConstant, Microsoft.VisualStudio.QualityTools.LoadTest">
                      <RuleParameters>
                        <RuleParameter Name="AlertIfOver" Value="False" />
                        <RuleParameter Name="WarningThreshold" Value="100" />
                        <RuleParameter Name="CriticalThreshold" Value="50" />
                      </RuleParameters>
                    </ThresholdRule>
                  </ThresholdRules>
                </Counter>
                <Counter Name="Page Faults/sec" />
                <Counter Name="Pages/sec" />
                <Counter Name="Pool Paged Bytes" RangeGroup="Memory Bytes" />
                <Counter Name="Pool Nonpaged bytes" RangeGroup="Memory Bytes" />
              </Counters>
            </CounterCategory>
            <CounterCategory Name="Network Interface">
              <Counters>
                <Counter Name="Bytes Received/sec" RangeGroup="Network Bytes" />
                <Counter Name="Bytes Sent/sec" RangeGroup="Network Bytes" />
                <Counter Name="Output Queue Length">
                  <ThresholdRules>
                    <ThresholdRule Classname="Microsoft.VisualStudio.TestTools.WebStress.Rules.ThresholdRuleCompareConstant, Microsoft.VisualStudio.QualityTools.LoadTest">
                      <RuleParameters>
                        <RuleParameter Name="AlertIfOver" Value="True" />
                        <RuleParameter Name="WarningThreshold" Value="1.5" />
                        <RuleParameter Name="CriticalThreshold" Value="2" />
                      </RuleParameters>
                    </ThresholdRule>
                    <ThresholdRule Classname="Microsoft.VisualStudio.TestTools.WebStress.Rules.ThresholdRuleCompareConstant, Microsoft.VisualStudio.QualityTools.LoadTest">
                      <RuleParameters>
                        <RuleParameter Name="AlertIfOver" Value="True" />
                        <RuleParameter Name="WarningThreshold" Value="1.5" />
                        <RuleParameter Name="CriticalThreshold" Value="2" />
                      </RuleParameters>
                    </ThresholdRule>
                  </ThresholdRules>
                </Counter>
                <Counter Name="Packets Received/sec" RangeGroup="Network Packets" />
                <Counter Name="Packets Sent/sec" RangeGroup="Network Packets" />
                <Counter Name="Current Bandwidth" RangeGroup="Network Bytes" />
                <Counter Name="Bytes Total/sec" RangeGroup="Network Bytes">
                  <ThresholdRules>
                    <ThresholdRule Classname="Microsoft.VisualStudio.TestTools.WebStress.Rules.ThresholdRuleCompareCounters, Microsoft.VisualStudio.QualityTools.LoadTest, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
                      <RuleParameters>
                        <RuleParameter Name="DependentCategory" Value="Network Interface" />
                        <RuleParameter Name="DependentCounter" Value="Current Bandwidth" />
                        <RuleParameter Name="DependentInstance" Value="" />
                        <RuleParameter Name="AlertIfOver" Value="True" />
                        <RuleParameter Name="WarningThreshold" Value="0.6" />
                        <RuleParameter Name="CriticalThreshold" Value="0.7" />
                      </RuleParameters>
                    </ThresholdRule>
                    <ThresholdRule Classname="Microsoft.VisualStudio.TestTools.WebStress.Rules.ThresholdRuleCompareCounters, Microsoft.VisualStudio.QualityTools.LoadTest, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
                      <RuleParameters>
                        <RuleParameter Name="DependentCategory" Value="Network Interface" />
                        <RuleParameter Name="DependentCounter" Value="Current Bandwidth" />
                        <RuleParameter Name="DependentInstance" Value="" />
                        <RuleParameter Name="AlertIfOver" Value="True" />
                        <RuleParameter Name="WarningThreshold" Value="0.6" />
                        <RuleParameter Name="CriticalThreshold" Value="0.7" />
                      </RuleParameters>
                    </ThresholdRule>
                  </ThresholdRules>
                </Counter>
              </Counters>
              <Instances>
                <Instance Name="*" />
              </Instances>
            </CounterCategory>
            <CounterCategory Name="PhysicalDisk">
              <Counters>
                <Counter Name="% Disk Read Time" Range="100" />
                <Counter Name="% Disk Time" Range="100" />
                <Counter Name="% Disk Write Time" Range="100" />
                <Counter Name="% Idle Time" Range="100" HigherIsBetter="true">
                  <ThresholdRules>
                    <ThresholdRule Classname="Microsoft.VisualStudio.TestTools.WebStress.Rules.ThresholdRuleCompareConstant, Microsoft.VisualStudio.QualityTools.LoadTest">
                      <RuleParameters>
                        <RuleParameter Name="AlertIfOver" Value="False" />
                        <RuleParameter Name="WarningThreshold" Value="40" />
                        <RuleParameter Name="CriticalThreshold" Value="20" />
                      </RuleParameters>
                    </ThresholdRule>
                    <ThresholdRule Classname="Microsoft.VisualStudio.TestTools.WebStress.Rules.ThresholdRuleCompareConstant, Microsoft.VisualStudio.QualityTools.LoadTest">
                      <RuleParameters>
                        <RuleParameter Name="AlertIfOver" Value="False" />
                        <RuleParameter Name="WarningThreshold" Value="40" />
                        <RuleParameter Name="CriticalThreshold" Value="20" />
                      </RuleParameters>
                    </ThresholdRule>
                  </ThresholdRules>
                </Counter>
                <Counter Name="Avg. Disk Bytes/Read" RangeGroup="DiskBytesRate" />
                <Counter Name="Avg. Disk Bytes/Transfer" RangeGroup="DiskBytesRate" />
                <Counter Name="Avg. Disk Bytes/Write" RangeGroup="DiskBytesRate" />
                <Counter Name="Avg. Disk Queue Length" RangeGroup="Disk Queue Length" />
                <Counter Name="Avg. Disk Read Queue Length" RangeGroup="Disk Queue Length" />
                <Counter Name="Avg. Disk Write Queue Length" RangeGroup="Disk Queue Length" />
                <Counter Name="Current Disk Queue Length" RangeGroup="Disk Queue Length" />
                <Counter Name="Avg. Disk sec/Read" RangeGroup="Disk sec" />
                <Counter Name="Avg. Disk sec/Transfer" RangeGroup="Disk sec" />
                <Counter Name="Avg. Disk sec/Write" RangeGroup="Disk sec" />
                <Counter Name="Disk Bytes/sec" RangeGroup="Disk Bytes sec" />
                <Counter Name="Disk Read Bytes/sec" RangeGroup="Disk Bytes sec" />
                <Counter Name="Disk Reads/sec" RangeGroup="Disk Transfers sec" />
                <Counter Name="Disk Transfers/sec" RangeGroup="Disk Transfers sec" />
                <Counter Name="Disk Write Bytes/sec" RangeGroup="Disk Bytes sec" />
                <Counter Name="Disk Writes/sec" RangeGroup="Disk Transfers sec" />
                <Counter Name="Split IO/Sec" RangeGroup="Disk Transfers sec" />
              </Counters>
              <Instances>
                <Instance Name="*" />
              </Instances>
            </CounterCategory>
            <CounterCategory Name="Processor">
              <Counters>
                <Counter Name="% Processor Time" Range="100">
                  <ThresholdRules>
                    <ThresholdRule Classname="Microsoft.VisualStudio.TestTools.WebStress.Rules.ThresholdRuleCompareConstant, Microsoft.VisualStudio.QualityTools.LoadTest">
                      <RuleParameters>
                        <RuleParameter Name="AlertIfOver" Value="True" />
                        <RuleParameter Name="WarningThreshold" Value="75" />
                        <RuleParameter Name="CriticalThreshold" Value="90" />
                      </RuleParameters>
                    </ThresholdRule>
                    <ThresholdRule Classname="Microsoft.VisualStudio.TestTools.WebStress.Rules.ThresholdRuleCompareConstant, Microsoft.VisualStudio.QualityTools.LoadTest">
                      <RuleParameters>
                        <RuleParameter Name="AlertIfOver" Value="True" />
                        <RuleParameter Name="WarningThreshold" Value="75" />
                        <RuleParameter Name="CriticalThreshold" Value="90" />
                      </RuleParameters>
                    </ThresholdRule>
                  </ThresholdRules>
                </Counter>
                <Counter Name="% Privileged Time" Range="100" />
                <Counter Name="% User Time" Range="100" />
              </Counters>
              <Instances>
                <Instance Name="_Total" />
              </Instances>
            </CounterCategory>
            <CounterCategory Name="System">
              <Counters>
                <Counter Name="Context Switches/sec" />
                <Counter Name="Processes" />
                <Counter Name="Processor Queue Length" />
                <Counter Name="Threads" />
              </Counters>
            </CounterCategory>
            <CounterCategory Name="Process">
              <Counters>
                <Counter Name="% Processor Time" RangeGroup="Processor Time" />
                <Counter Name="% Privileged Time" RangeGroup="Processor Time" />
                <Counter Name="% User Time" RangeGroup="Processor Time" />
                <Counter Name="Handle Count" />
                <Counter Name="Thread Count" />
                <Counter Name="Private Bytes" RangeGroup="Memory Bytes" />
                <Counter Name="Virtual Bytes" RangeGroup="Memory Bytes" />
                <Counter Name="Working Set" RangeGroup="Memory Bytes" />
              </Counters>
              <Instances>
                <Instance Name="QTController" />
              </Instances>
            </CounterCategory>
          </CounterCategories>
          <DefaultCountersForAutomaticGraphs>
            <DefaultCounter CategoryName="Processor" CounterName="% Processor Time" InstanceName="_Total" GraphName="" />
            <DefaultCounter CategoryName="Memory" CounterName="Available MBytes" InstanceName="" GraphName="" />
          </DefaultCountersForAutomaticGraphs>
        </CounterSet>
        <CounterSet Name="代理程式" CounterSetType="Agent" LocId="CounterSet_Agent">
          <CounterCategories>
            <CounterCategory Name="Memory">
              <Counters>
                <Counter Name="% Committed Bytes In Use" Range="100" />
                <Counter Name="Available MBytes" RangeGroup="Memory Bytes" HigherIsBetter="true">
                  <ThresholdRules>
                    <ThresholdRule Classname="Microsoft.VisualStudio.TestTools.WebStress.Rules.ThresholdRuleCompareConstant, Microsoft.VisualStudio.QualityTools.LoadTest">
                      <RuleParameters>
                        <RuleParameter Name="AlertIfOver" Value="False" />
                        <RuleParameter Name="WarningThreshold" Value="100" />
                        <RuleParameter Name="CriticalThreshold" Value="50" />
                      </RuleParameters>
                    </ThresholdRule>
                  </ThresholdRules>
                </Counter>
                <Counter Name="Page Faults/sec" />
                <Counter Name="Pages/sec" />
                <Counter Name="Pool Paged Bytes" RangeGroup="Memory Bytes" />
                <Counter Name="Pool Nonpaged bytes" RangeGroup="Memory Bytes" />
              </Counters>
            </CounterCategory>
            <CounterCategory Name="Network Interface">
              <Counters>
                <Counter Name="Bytes Received/sec" RangeGroup="Network Bytes" />
                <Counter Name="Bytes Sent/sec" RangeGroup="Network Bytes" />
                <Counter Name="Output Queue Length">
                  <ThresholdRules>
                    <ThresholdRule Classname="Microsoft.VisualStudio.TestTools.WebStress.Rules.ThresholdRuleCompareConstant, Microsoft.VisualStudio.QualityTools.LoadTest">
                      <RuleParameters>
                        <RuleParameter Name="AlertIfOver" Value="True" />
                        <RuleParameter Name="WarningThreshold" Value="1.5" />
                        <RuleParameter Name="CriticalThreshold" Value="2" />
                      </RuleParameters>
                    </ThresholdRule>
                  </ThresholdRules>
                </Counter>
                <Counter Name="Packets Received/sec" RangeGroup="Network Packets" />
                <Counter Name="Packets Sent/sec" RangeGroup="Network Packets" />
                <Counter Name="Current Bandwidth" RangeGroup="Network Bytes" />
                <Counter Name="Bytes Total/sec" RangeGroup="Network Bytes">
                  <ThresholdRules>
                    <ThresholdRule Classname="Microsoft.VisualStudio.TestTools.WebStress.Rules.ThresholdRuleCompareCounters, Microsoft.VisualStudio.QualityTools.LoadTest, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
                      <RuleParameters>
                        <RuleParameter Name="DependentCategory" Value="Network Interface" />
                        <RuleParameter Name="DependentCounter" Value="Current Bandwidth" />
                        <RuleParameter Name="DependentInstance" Value="" />
                        <RuleParameter Name="AlertIfOver" Value="True" />
                        <RuleParameter Name="WarningThreshold" Value="0.6" />
                        <RuleParameter Name="CriticalThreshold" Value="0.7" />
                      </RuleParameters>
                    </ThresholdRule>
                  </ThresholdRules>
                </Counter>
              </Counters>
              <Instances>
                <Instance Name="*" />
              </Instances>
            </CounterCategory>
            <CounterCategory Name="PhysicalDisk">
              <Counters>
                <Counter Name="% Disk Read Time" Range="100" />
                <Counter Name="% Disk Time" Range="100" />
                <Counter Name="% Disk Write Time" Range="100" />
                <Counter Name="% Idle Time" Range="100" HigherIsBetter="true">
                  <ThresholdRules>
                    <ThresholdRule Classname="Microsoft.VisualStudio.TestTools.WebStress.Rules.ThresholdRuleCompareConstant, Microsoft.VisualStudio.QualityTools.LoadTest">
                      <RuleParameters>
                        <RuleParameter Name="AlertIfOver" Value="False" />
                        <RuleParameter Name="WarningThreshold" Value="40" />
                        <RuleParameter Name="CriticalThreshold" Value="20" />
                      </RuleParameters>
                    </ThresholdRule>
                  </ThresholdRules>
                </Counter>
                <Counter Name="Avg. Disk Bytes/Read" RangeGroup="DiskBytesRate" />
                <Counter Name="Avg. Disk Bytes/Transfer" RangeGroup="DiskBytesRate" />
                <Counter Name="Avg. Disk Bytes/Write" RangeGroup="DiskBytesRate" />
                <Counter Name="Avg. Disk Queue Length" RangeGroup="Disk Queue Length" />
                <Counter Name="Avg. Disk Read Queue Length" RangeGroup="Disk Queue Length" />
                <Counter Name="Avg. Disk Write Queue Length" RangeGroup="Disk Queue Length" />
                <Counter Name="Current Disk Queue Length" RangeGroup="Disk Queue Length" />
                <Counter Name="Avg. Disk sec/Read" RangeGroup="Disk sec" />
                <Counter Name="Avg. Disk sec/Transfer" RangeGroup="Disk sec" />
                <Counter Name="Avg. Disk sec/Write" RangeGroup="Disk sec" />
                <Counter Name="Disk Bytes/sec" RangeGroup="Disk Bytes sec" />
                <Counter Name="Disk Read Bytes/sec" RangeGroup="Disk Bytes sec" />
                <Counter Name="Disk Reads/sec" RangeGroup="Disk Transfers sec" />
                <Counter Name="Disk Transfers/sec" RangeGroup="Disk Transfers sec" />
                <Counter Name="Disk Write Bytes/sec" RangeGroup="Disk Bytes sec" />
                <Counter Name="Disk Writes/sec" RangeGroup="Disk Transfers sec" />
                <Counter Name="Split IO/Sec" RangeGroup="Disk Transfers sec" />
              </Counters>
              <Instances>
                <Instance Name="*" />
              </Instances>
            </CounterCategory>
            <CounterCategory Name="Processor">
              <Counters>
                <Counter Name="% Processor Time" Range="100">
                  <ThresholdRules>
                    <ThresholdRule Classname="Microsoft.VisualStudio.TestTools.WebStress.Rules.ThresholdRuleCompareConstant, Microsoft.VisualStudio.QualityTools.LoadTest">
                      <RuleParameters>
                        <RuleParameter Name="AlertIfOver" Value="True" />
                        <RuleParameter Name="WarningThreshold" Value="75" />
                        <RuleParameter Name="CriticalThreshold" Value="90" />
                      </RuleParameters>
                    </ThresholdRule>
                  </ThresholdRules>
                </Counter>
                <Counter Name="% Privileged Time" Range="100" />
                <Counter Name="% User Time" Range="100" />
              </Counters>
              <Instances>
                <Instance Name="0" />
                <Instance Name="_Total" />
              </Instances>
            </CounterCategory>
            <CounterCategory Name="System">
              <Counters>
                <Counter Name="Context Switches/sec" />
                <Counter Name="Processes" />
                <Counter Name="Processor Queue Length" />
                <Counter Name="Threads" />
              </Counters>
            </CounterCategory>
            <CounterCategory Name="Process">
              <Counters>
                <Counter Name="% Processor Time" RangeGroup="Processor Time" />
                <Counter Name="% Privileged Time" RangeGroup="Processor Time" />
                <Counter Name="% User Time" RangeGroup="Processor Time" />
                <Counter Name="Handle Count" />
                <Counter Name="Thread Count" />
                <Counter Name="Private Bytes" RangeGroup="Memory Bytes" />
                <Counter Name="Virtual Bytes" RangeGroup="Memory Bytes" />
                <Counter Name="Working Set" RangeGroup="Memory Bytes" />
              </Counters>
              <Instances>
                <Instance Name="devenv" />
                <Instance Name="QTAgentService" />
                <Instance Name="QTAgent" />
                <Instance Name="QTAgent32" />
                <Instance Name="QTDCAgent" />
                <Instance Name="QTDCAgent32" />
              </Instances>
            </CounterCategory>
          </CounterCategories>
          <DefaultCountersForAutomaticGraphs>
            <DefaultCounter CategoryName="Processor" CounterName="% Processor Time" InstanceName="0" GraphName="" RunType="Local" />
            <DefaultCounter CategoryName="Processor" CounterName="% Processor Time" InstanceName="_Total" GraphName="" RunType="Remote" />
            <DefaultCounter CategoryName="Memory" CounterName="Available MBytes" InstanceName="" GraphName="" />
          </DefaultCountersForAutomaticGraphs>
        </CounterSet>
      </CounterSets>
      <RunConfigurations>
        <RunConfiguration Name="回合設定1" Description="" ResultsStoreType="Database" TimingDetailsStorage="AllIndividualDetails" SaveTestLogsOnError="true" SaveTestLogsFrequency="0" MaxErrorDetails="200" MaxErrorsPerType="1000" MaxThresholdViolations="1000" MaxRequestUrlsReported="1000" UseTestIterations="false" RunDuration="300" WarmupTime="0" CoolDownTime="0" TestIterations="100" WebTestConnectionModel="ConnectionPerUser" WebTestConnectionPoolSize="50" SampleRate="5" ValidationLevel="High" SqlTracingConnectString="" SqlTracingConnectStringDisplayValue="" SqlTracingDirectory="" SqlTracingEnabled="false" SqlTracingMinimumDuration="500" RunUnitTestsInAppDomain="true">
          <CounterSetMappings>
            <CounterSetMapping ComputerName="[CONTROLLER MACHINE]">
              <CounterSetReferences>
                <CounterSetReference CounterSetName="LoadTest" />
                <CounterSetReference CounterSetName="控制器" />
              </CounterSetReferences>
            </CounterSetMapping>
            <CounterSetMapping ComputerName="[AGENT MACHINES]">
              <CounterSetReferences>
                <CounterSetReference CounterSetName="代理程式" />
              </CounterSetReferences>
            </CounterSetMapping>
          </CounterSetMappings>
        </RunConfiguration>
      </RunConfigurations>
    </LoadTest>
    <WebTest name="WebTestUpdateCase02" storage="d:\git\attendant\loadtesting\loadtesting\webtestupdatecase02.webtest" id="80bb2dba-dfec-42d3-a0d1-1c43eee9c35f" persistedWebTest="">
    </WebTest>
    <WebTest name="WebTestSelectCase01" storage="d:\git\attendant\loadtesting\loadtesting\webtestselectcase01.webtest" id="a5b43290-1c44-42f1-bfa2-c60d219f5d58" persistedWebTest="">
    </WebTest>
    <WebTest name="WebTestUpdateCase01" storage="d:\git\attendant\loadtesting\loadtesting\webtestupdatecase01.webtest" id="d1f0dc6a-f347-4b33-8582-0a71909fcaf1" persistedWebTest="">
    </WebTest>
    <WebTest name="WebTestInsertDeleteCase01" storage="d:\git\attendant\loadtesting\loadtesting\webtestinsertdeletecase01.webtest" id="5bb2bc9f-0fc4-499f-9eb4-d5c514a4ffa9" persistedWebTest="">
      <Execution id="12bfbff0-a067-441f-9dda-850268fcde95" />
    </WebTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="不在清單中的結果" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="所有載入的結果" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry isTransparent="false" testId="2d70237b-00f9-4804-8689-51ac87af499e" executionId="58a01d44-e888-4690-beb6-57cae8821d65" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d">
      <TestEntries>
        <TestEntry isTransparent="false" testId="5bb2bc9f-0fc4-499f-9eb4-d5c514a4ffa9" executionId="2c5cbebe-3d9e-4e4d-9d67-8b46e53c980a" parentExecutionId="58a01d44-e888-4690-beb6-57cae8821d65" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
        <TestEntry isTransparent="false" testId="a5b43290-1c44-42f1-bfa2-c60d219f5d58" executionId="79f674da-4458-42a4-af72-60e5f45c1fa5" parentExecutionId="58a01d44-e888-4690-beb6-57cae8821d65" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
        <TestEntry isTransparent="false" testId="32b3eb7f-657d-48cc-acc9-b304c0cd482c" executionId="b0447c72-fa9b-4f4b-85b1-c74d3e0c322e" parentExecutionId="58a01d44-e888-4690-beb6-57cae8821d65" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
        <TestEntry isTransparent="false" testId="d1f0dc6a-f347-4b33-8582-0a71909fcaf1" executionId="259e9fda-b71e-475c-b605-9560abf91bf6" parentExecutionId="58a01d44-e888-4690-beb6-57cae8821d65" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
        <TestEntry isTransparent="false" testId="80bb2dba-dfec-42d3-a0d1-1c43eee9c35f" executionId="8c895d46-8ba8-4a90-8783-f3e21385b50c" parentExecutionId="58a01d44-e888-4690-beb6-57cae8821d65" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
      </TestEntries>
    </TestEntry>
  </TestEntries>
  <Results>
    <LoadTestResult executionId="58a01d44-e888-4690-beb6-57cae8821d65" testId="2d70237b-00f9-4804-8689-51ac87af499e" testName="LoadTest2" computerName="ANSONHUANG" duration="00:05:00" startTime="2017-05-17T11:41:13.0249110+08:00" endTime="2017-05-17T11:46:13.0249110+08:00" testType="fa4c85ff-1236-4463-b954-3ba2f0eabd95" outcome="Completed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="58a01d44-e888-4690-beb6-57cae8821d65" runId="11" controllerStartTime="2017-05-17T11:41:13.0249110+08:00" runStatus="Stopped" resultsStoreType="Database" resultsRepositoryConnectString="LAs4ogoKlDcN2wGNXrhY1rUZFJYkv4+6TMJl1UhPeJqdeO7oF3XveoWcDZeIkBy8JoJ/gVxNrlVgJUAb6xv/LJaNIQG6DwwTAwp/f6u/lMyYNxGipciOxw==" loadTestDuration="300" loadTestWarmupTime="0" previouslyViewed="true">
      <AnalyzerViewState>
        <LoadTestRunDescriptor isLegendPanelVisible="true" isOverviewPanelVisible="true" isCounterPanelVisible="true" scrollingGraph="false" minMaxGraph="false" showHorizontalGridOnGraph="true" showThresholdsOnGraph="true" showComparison="false" showZoom="true" lockZoom="true" activeConsoleView="Summary" selectedGraphPanel1="關鍵指標" selectedGraphPanel2="頁面回應時間" selectedGraphPanel3="待測系統" selectedGraphPanel4="控制器和代理程式" graphPanelLayout="FourGrid" tablePanelLayout="TwoHorizontal" selectedTablePanel1="Tests" selectedTablePanel2="Errors" selectedTablePanel3="Thresholds" selectedTablePanel4="Transactions" controllerName="ANSONHUANG" isLocalRun="true" testRunId="79bb2d72-ecfe-4bc5-a364-f9a2f0b08b64" repositoryRunId="0">
          <GraphDescriptors>
            <GraphDescriptor graphName="關鍵指標">
              <HorizontalZoomRange lower="-1" upper="-1" />
              <VerticalZoomRange lower="0" upper="100" />
              <PlotDescriptors>
                <PlotDescriptor colorArgb="-65536" lineStyle="0" fixedRange="0" rangeGroup="User Load" showOnGraph="true" isSelected="false">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Scenario" counterName="User Load" instanceName="_Total" baseInstanceName="_Total" loadTestItemId="-1" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-16744448" lineStyle="0" fixedRange="0" rangeGroup="Pages/Sec" showOnGraph="true" isSelected="false">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Pages/Sec" instanceName="_Total" baseInstanceName="_Total" loadTestItemId="-1" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-16776961" lineStyle="0" fixedRange="0" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="_Total" baseInstanceName="_Total" loadTestItemId="-1" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-8388480" lineStyle="0" fixedRange="0" rangeGroup="Errors/Sec" showOnGraph="true" isSelected="false">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Errors" counterName="Errors/Sec" instanceName="_Total" baseInstanceName="_Total" loadTestItemId="-1" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-23296" lineStyle="0" fixedRange="0" rangeGroup="Threshold Violations/Sec" showOnGraph="true" isSelected="false">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Errors" counterName="Threshold Violations/Sec" instanceName="_Total" baseInstanceName="_Total" loadTestItemId="-1" />
                </PlotDescriptor>
              </PlotDescriptors>
            </GraphDescriptor>
            <GraphDescriptor graphName="待測系統">
              <HorizontalZoomRange lower="-1" upper="-1" />
              <VerticalZoomRange lower="0" upper="100" />
            </GraphDescriptor>
            <GraphDescriptor graphName="控制器和代理程式">
              <HorizontalZoomRange lower="-1" upper="-1" />
              <VerticalZoomRange lower="0" upper="100" />
              <PlotDescriptors>
                <PlotDescriptor colorArgb="-65536" lineStyle="0" fixedRange="100" rangeGroup="% Processor Time" showOnGraph="true" isSelected="false">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="Processor" counterName="% Processor Time" instanceName="0" baseInstanceName="0" loadTestItemId="-1" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-16744448" lineStyle="0" fixedRange="0" rangeGroup="Memory Bytes" showOnGraph="true" isSelected="false">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="Memory" counterName="Available MBytes" instanceName="systemdiagnosticsperfcounterlibsingleinstance" baseInstanceName="systemdiagnosticsperfcounterlibsingleinstance" loadTestItemId="-1" />
                </PlotDescriptor>
              </PlotDescriptors>
            </GraphDescriptor>
            <GraphDescriptor graphName="測試回應時間">
              <HorizontalZoomRange lower="-1" upper="-1" />
              <VerticalZoomRange lower="0" upper="274" />
              <PlotDescriptors>
                <PlotDescriptor colorArgb="-65536" lineStyle="0" fixedRange="274" rangeGroup="Avg. Test Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestUpdateCase02;情節1">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Test" counterName="Avg. Test Time" instanceName="WebTestUpdateCase02(004)" baseInstanceName="WebTestUpdateCase02" loadTestItemId="4" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-16744448" lineStyle="0" fixedRange="274" rangeGroup="Avg. Test Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestSelectCase01;情節1">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Test" counterName="Avg. Test Time" instanceName="WebTestSelectCase01(001)" baseInstanceName="WebTestSelectCase01" loadTestItemId="1" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-16776961" lineStyle="0" fixedRange="274" rangeGroup="Avg. Test Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestSelectCase02;情節1">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Test" counterName="Avg. Test Time" instanceName="WebTestSelectCase02(002)" baseInstanceName="WebTestSelectCase02" loadTestItemId="2" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-8388480" lineStyle="0" fixedRange="274" rangeGroup="Avg. Test Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestInsertDeleteCase01;情節1">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Test" counterName="Avg. Test Time" instanceName="WebTestInsertDeleteCase01(000)" baseInstanceName="WebTestInsertDeleteCase01" loadTestItemId="0" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-23296" lineStyle="0" fixedRange="274" rangeGroup="Avg. Test Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestUpdateCase01;情節1">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Test" counterName="Avg. Test Time" instanceName="WebTestUpdateCase01(003)" baseInstanceName="WebTestUpdateCase01" loadTestItemId="3" />
                </PlotDescriptor>
              </PlotDescriptors>
            </GraphDescriptor>
            <GraphDescriptor graphName="異動回應時間">
              <HorizontalZoomRange lower="-1" upper="-1" />
              <VerticalZoomRange lower="0" upper="100" />
            </GraphDescriptor>
            <GraphDescriptor graphName="頁面回應時間">
              <HorizontalZoomRange lower="-1" upper="-1" />
              <VerticalZoomRange lower="0" upper="2" />
              <PlotDescriptors>
                <PlotDescriptor colorArgb="-65536" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestUpdateCase02;情節1;http://10.11.36.114:8007/hrlogin/hrlogin.aspx----{GET}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="hrlogin-aspx{GET}(008)" baseInstanceName="hrlogin-aspx{GET}" loadTestItemId="8" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-16744448" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestUpdateCase02;情節1;http://10.11.36.114:8007/hrlogin/hrlogin.aspx----{POST}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="hrlogin-aspx{POST}(003)" baseInstanceName="hrlogin-aspx{POST}" loadTestItemId="3" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-16776961" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestSelectCase01;情節1;http://10.11.36.114:8007/hrlogin/hrlogin.aspx----{GET}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="hrlogin-aspx{GET}(017)" baseInstanceName="hrlogin-aspx{GET}" loadTestItemId="17" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-8388480" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestSelectCase01;情節1;http://10.11.36.114:8007/hrlogin/hrlogin.aspx----{POST}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="hrlogin-aspx{POST}(012)" baseInstanceName="hrlogin-aspx{POST}" loadTestItemId="12" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-23296" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestSelectCase02;情節1;http://10.11.36.114:8007/hrlogin/hrlogin.aspx----{GET}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="hrlogin-aspx{GET}(026)" baseInstanceName="hrlogin-aspx{GET}" loadTestItemId="26" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-16744320" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestSelectCase02;情節1;http://10.11.36.114:8007/hrlogin/hrlogin.aspx----{POST}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="hrlogin-aspx{POST}(021)" baseInstanceName="hrlogin-aspx{POST}" loadTestItemId="21" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-7667712" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestInsertDeleteCase01;情節1;http://10.11.36.114:8007/hrlogin/hrlogin.aspx----{GET}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="hrlogin-aspx{GET}(035)" baseInstanceName="hrlogin-aspx{GET}" loadTestItemId="35" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-16751616" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestInsertDeleteCase01;情節1;http://10.11.36.114:8007/hrlogin/hrlogin.aspx----{POST}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="hrlogin-aspx{POST}(030)" baseInstanceName="hrlogin-aspx{POST}" loadTestItemId="30" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-16777077" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestUpdateCase01;情節1;http://10.11.36.114:8007/hrlogin/hrlogin.aspx----{GET}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="hrlogin-aspx{GET}(044)" baseInstanceName="hrlogin-aspx{GET}" loadTestItemId="44" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-16741493" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestUpdateCase01;情節1;http://10.11.36.114:8007/hrlogin/hrlogin.aspx----{POST}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="hrlogin-aspx{POST}(039)" baseInstanceName="hrlogin-aspx{POST}" loadTestItemId="39" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-5383962" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestInsertDeleteCase01;情節1;http://10.11.36.114:8007/OverTime/OvertimePreOrder_Add.aspx----{GET}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="OvertimePreOrder_Add-aspx{GET}(051)" baseInstanceName="OvertimePreOrder_Add-aspx{GET}" loadTestItemId="51" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-7278960" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestInsertDeleteCase01;情節1;http://10.11.36.114:8007/OverTime/OvertimePreOrder_Add.aspx----{POST}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="OvertimePreOrder_Add-aspx{POST}(054)" baseInstanceName="OvertimePreOrder_Add-aspx{POST}" loadTestItemId="54" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-38476" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestInsertDeleteCase01;情節1;http://10.11.36.114:8007/Util/WcfCascadingHelper.svc/Util_GetUser----{POST}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="Util_GetUser{POST}(047)" baseInstanceName="Util_GetUser{POST}" loadTestItemId="47" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-10496" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestUpdateCase01;情節1;http://10.11.36.114:8007/OverTime/OvertimePreOrder.aspx----{GET}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="OvertimePreOrder-aspx{GET}(062)" baseInstanceName="OvertimePreOrder-aspx{GET}" loadTestItemId="62" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-16777216" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestSelectCase02;情節1;http://10.11.36.114:8007/OverTime/OvertimePreOrder.aspx----{GET}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="OvertimePreOrder-aspx{GET}(069)" baseInstanceName="OvertimePreOrder-aspx{GET}" loadTestItemId="69" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-65536" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestSelectCase02;情節1;http://10.11.36.114:8007/OverTime/OvertimePreOrder.aspx----{POST}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="OvertimePreOrder-aspx{POST}(070)" baseInstanceName="OvertimePreOrder-aspx{POST}" loadTestItemId="70" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-16744448" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestUpdateCase01;情節1;http://10.11.36.114:8007/OverTime/OvertimePreOrder.aspx----{POST}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="OvertimePreOrder-aspx{POST}(071)" baseInstanceName="OvertimePreOrder-aspx{POST}" loadTestItemId="71" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-16776961" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestSelectCase01;情節1;http://10.11.36.114:8007/OverTime/OvertimePreOrder.aspx----{GET}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="OvertimePreOrder-aspx{GET}(078)" baseInstanceName="OvertimePreOrder-aspx{GET}" loadTestItemId="78" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-8388480" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestInsertDeleteCase01;情節1;http://10.11.36.114:8007/OverTime/OvertimePreOrder.aspx----{POST}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="OvertimePreOrder-aspx{POST}(080)" baseInstanceName="OvertimePreOrder-aspx{POST}" loadTestItemId="80" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-23296" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestUpdateCase02;情節1;http://10.11.36.114:8007/OverTime/OvertimePreOrder.aspx----{GET}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="OvertimePreOrder-aspx{GET}(088)" baseInstanceName="OvertimePreOrder-aspx{GET}" loadTestItemId="88" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-16744320" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestUpdateCase02;情節1;http://10.11.36.114:8007/OverTime/OvertimePreOrder.aspx----{POST}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="OvertimePreOrder-aspx{POST}(082)" baseInstanceName="OvertimePreOrder-aspx{POST}" loadTestItemId="82" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-7667712" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestUpdateCase02;情節1;http://10.11.36.114:8007/OverTime/OvertimePreOrder_Modify.aspx----{POST}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="OvertimePreOrder_Modify-aspx{POST}(091)" baseInstanceName="OvertimePreOrder_Modify-aspx{POST}" loadTestItemId="91" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-16751616" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="false" counterMetadata="WebTestUpdateCase01;情節1;http://10.11.36.114:8007/OverTime/OvertimePreOrder_Modify.aspx----{POST}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="OvertimePreOrder_Modify-aspx{POST}(092)" baseInstanceName="OvertimePreOrder_Modify-aspx{POST}" loadTestItemId="92" />
                </PlotDescriptor>
                <PlotDescriptor colorArgb="-16777077" lineStyle="0" fixedRange="2" rangeGroup="Avg. Page Time" showOnGraph="true" isSelected="true" counterMetadata="WebTestSelectCase01;情節1;http://10.11.36.114:8007/OverTime/OvertimePreOrder.aspx----{POST}">
                  <CounterDescriptor machineName="ANSONHUANG" categoryName="LoadTest:Page" counterName="Avg. Page Time" instanceName="OvertimePreOrder-aspx{POST}(093)" baseInstanceName="OvertimePreOrder-aspx{POST}" loadTestItemId="93" />
                </PlotDescriptor>
              </PlotDescriptors>
            </GraphDescriptor>
          </GraphDescriptors>
        </LoadTestRunDescriptor>
      </AnalyzerViewState>
      <Summary>
        <PerformanceCounterResults>
          <PerformanceCounterResult isOverallResultCounter="true" higherIsBetter="true" machineName="ANSONHUANG" categoryName="LoadTest:Scenario" counterName="User Load" instanceName="_Total" value="250" />
          <PerformanceCounterResult isOverallResultCounter="true" higherIsBetter="true" machineName="ANSONHUANG" categoryName="LoadTest:Test" counterName="Total Tests" instanceName="_Total" value="248" />
          <PerformanceCounterResult isOverallResultCounter="true" higherIsBetter="false" machineName="ANSONHUANG" categoryName="LoadTest:Test" counterName="Failed Tests" instanceName="_Total" value="99" />
          <PerformanceCounterResult isOverallResultCounter="true" higherIsBetter="true" machineName="ANSONHUANG" categoryName="LoadTest:Test" counterName="Tests/Sec" instanceName="_Total" value="0.826666653" />
          <PerformanceCounterResult isOverallResultCounter="true" higherIsBetter="false" machineName="ANSONHUANG" categoryName="LoadTest:Test" counterName="Avg. Test Time" instanceName="_Total" value="144.469925" />
          <PerformanceCounterResult isOverallResultCounter="true" higherIsBetter="true" machineName="ANSONHUANG" categoryName="LoadTest:Request" counterName="Total Requests" instanceName="_Total" value="28109" />
          <PerformanceCounterResult isOverallResultCounter="true" higherIsBetter="false" machineName="ANSONHUANG" categoryName="LoadTest:Request" counterName="Failed Requests" instanceName="_Total" value="351" />
          <PerformanceCounterResult isOverallResultCounter="true" higherIsBetter="true" machineName="ANSONHUANG" categoryName="LoadTest:Request" counterName="Cached Requests" instanceName="_Total" value="30107" />
          <PerformanceCounterResult isOverallResultCounter="true" higherIsBetter="true" machineName="ANSONHUANG" categoryName="LoadTest:Request" counterName="Requests/Sec" instanceName="_Total" value="93.69666" />
          <PerformanceCounterResult isOverallResultCounter="true" higherIsBetter="false" machineName="ANSONHUANG" categoryName="LoadTest:Request" counterName="Avg. Response Time" instanceName="_Total" value="0.01299647" />
          <PerformanceCounterResult isOverallResultCounter="false" higherIsBetter="false" machineName="ANSONHUANG" categoryName="Processor" counterName="% Processor Time" instanceName="_Total" value="13.3498344" />
          <PerformanceCounterResult isOverallResultCounter="false" higherIsBetter="true" machineName="ANSONHUANG" categoryName="Memory" counterName="Available MBytes" instanceName="-" value="2280" />
          <PerformanceCounterResult isOverallResultCounter="false" higherIsBetter="false" machineName="ANSONHUANG" categoryName="Network Interface" counterName="Bytes Received/sec" instanceName="isatap.{ae7a01d2-99d3-45b8-8e09-eb10a5dae02c}" value="0" />
          <PerformanceCounterResult isOverallResultCounter="false" higherIsBetter="false" machineName="ANSONHUANG" categoryName="Network Interface" counterName="Bytes Received/sec" instanceName="teredo tunneling pseudo-interface" value="0" />
          <PerformanceCounterResult isOverallResultCounter="false" higherIsBetter="false" machineName="ANSONHUANG" categoryName="Network Interface" counterName="Bytes Received/sec" instanceName="isatap.{e3b6476c-2810-43f9-88ed-cf2b6367dad5}" value="0" />
          <PerformanceCounterResult isOverallResultCounter="false" higherIsBetter="false" machineName="ANSONHUANG" categoryName="Network Interface" counterName="Bytes Received/sec" instanceName="isatap.{534cff5c-f4f2-4ea7-bdc9-d530942170c9}" value="0" />
          <PerformanceCounterResult isOverallResultCounter="false" higherIsBetter="false" machineName="ANSONHUANG" categoryName="Network Interface" counterName="Bytes Received/sec" instanceName="intel[r] pro_1000 mt network connection" value="1013756.19" />
          <PerformanceCounterResult isOverallResultCounter="false" higherIsBetter="false" machineName="ANSONHUANG" categoryName="Network Interface" counterName="Bytes Sent/sec" instanceName="isatap.{ae7a01d2-99d3-45b8-8e09-eb10a5dae02c}" value="0" />
          <PerformanceCounterResult isOverallResultCounter="false" higherIsBetter="false" machineName="ANSONHUANG" categoryName="Network Interface" counterName="Bytes Sent/sec" instanceName="teredo tunneling pseudo-interface" value="0" />
          <PerformanceCounterResult isOverallResultCounter="false" higherIsBetter="false" machineName="ANSONHUANG" categoryName="Network Interface" counterName="Bytes Sent/sec" instanceName="isatap.{e3b6476c-2810-43f9-88ed-cf2b6367dad5}" value="0" />
          <PerformanceCounterResult isOverallResultCounter="false" higherIsBetter="false" machineName="ANSONHUANG" categoryName="Network Interface" counterName="Bytes Sent/sec" instanceName="isatap.{534cff5c-f4f2-4ea7-bdc9-d530942170c9}" value="0" />
          <PerformanceCounterResult isOverallResultCounter="false" higherIsBetter="false" machineName="ANSONHUANG" categoryName="Network Interface" counterName="Bytes Sent/sec" instanceName="intel[r] pro_1000 mt network connection" value="122709.469" />
        </PerformanceCounterResults>
        <PageSummaries>
          <PageSummary scenarioName="情節1" testName="WebTestUpdateCase02" url="hrlogin.aspx{GET}" pageCount="94" responseTime="193" />
          <PageSummary scenarioName="情節1" testName="WebTestUpdateCase02" url="hrlogin.aspx{POST}" pageCount="94" responseTime="71" />
          <PageSummary scenarioName="情節1" testName="WebTestSelectCase01" url="hrlogin.aspx{GET}" pageCount="149" responseTime="223" />
          <PageSummary scenarioName="情節1" testName="WebTestSelectCase01" url="hrlogin.aspx{POST}" pageCount="149" responseTime="64" />
          <PageSummary scenarioName="情節1" testName="WebTestSelectCase02" url="hrlogin.aspx{GET}" pageCount="136" responseTime="223" />
          <PageSummary scenarioName="情節1" testName="WebTestSelectCase02" url="hrlogin.aspx{POST}" pageCount="136" responseTime="71" />
          <PageSummary scenarioName="情節1" testName="WebTestInsertDeleteCase01" url="hrlogin.aspx{GET}" pageCount="25" responseTime="322" />
          <PageSummary scenarioName="情節1" testName="WebTestInsertDeleteCase01" url="hrlogin.aspx{POST}" pageCount="25" responseTime="92" />
          <PageSummary scenarioName="情節1" testName="WebTestUpdateCase01" url="hrlogin.aspx{GET}" pageCount="94" responseTime="206" />
          <PageSummary scenarioName="情節1" testName="WebTestUpdateCase01" url="hrlogin.aspx{POST}" pageCount="94" responseTime="61" />
          <PageSummary scenarioName="情節1" testName="WebTestInsertDeleteCase01" url="OvertimePreOrder_Add.aspx{GET}" pageCount="24" responseTime="174" />
          <PageSummary scenarioName="情節1" testName="WebTestInsertDeleteCase01" url="OvertimePreOrder_Add.aspx{POST}" pageCount="165" responseTime="151" />
          <PageSummary scenarioName="情節1" testName="WebTestInsertDeleteCase01" url="Util_GetUser{POST}" pageCount="600" responseTime="11" />
          <PageSummary scenarioName="情節1" testName="WebTestUpdateCase01" url="OvertimePreOrder.aspx{GET}" pageCount="92" responseTime="112" />
          <PageSummary scenarioName="情節1" testName="WebTestSelectCase02" url="OvertimePreOrder.aspx{GET}" pageCount="129" responseTime="96" />
          <PageSummary scenarioName="情節1" testName="WebTestSelectCase02" url="OvertimePreOrder.aspx{POST}" pageCount="351" responseTime="0" />
          <PageSummary scenarioName="情節1" testName="WebTestUpdateCase01" url="OvertimePreOrder.aspx{POST}" pageCount="222" responseTime="82" />
          <PageSummary scenarioName="情節1" testName="WebTestSelectCase01" url="OvertimePreOrder.aspx{GET}" pageCount="123" responseTime="108" />
          <PageSummary scenarioName="情節1" testName="WebTestInsertDeleteCase01" url="OvertimePreOrder.aspx{POST}" pageCount="76" responseTime="59" />
          <PageSummary scenarioName="情節1" testName="WebTestUpdateCase02" url="OvertimePreOrder.aspx{GET}" pageCount="57" responseTime="115" />
          <PageSummary scenarioName="情節1" testName="WebTestUpdateCase02" url="OvertimePreOrder.aspx{POST}" pageCount="160" responseTime="62" />
          <PageSummary scenarioName="情節1" testName="WebTestUpdateCase02" url="OvertimePreOrder_Modify.aspx{POST}" pageCount="144" responseTime="89" />
          <PageSummary scenarioName="情節1" testName="WebTestUpdateCase01" url="OvertimePreOrder_Modify.aspx{POST}" pageCount="185" responseTime="73" />
          <PageSummary scenarioName="情節1" testName="WebTestSelectCase01" url="OvertimePreOrder.aspx{POST}" pageCount="138" responseTime="71" />
        </PageSummaries>
        <TestSummaries>
          <TestSummary scenarioName="情節1" testName="WebTestUpdateCase02" totalTests="46" testsFailed="0" averageDuration="135453" />
          <TestSummary scenarioName="情節1" testName="WebTestSelectCase01" totalTests="25" testsFailed="0" averageDuration="247814" />
          <TestSummary scenarioName="情節1" testName="WebTestSelectCase02" totalTests="99" testsFailed="99" averageDuration="109796" />
          <TestSummary scenarioName="情節1" testName="WebTestInsertDeleteCase01" totalTests="18" testsFailed="0" averageDuration="134123" />
          <TestSummary scenarioName="情節1" testName="WebTestUpdateCase01" totalTests="60" testsFailed="0" averageDuration="168637" />
        </TestSummaries>
      </Summary>
    </LoadTestResult>
  </Results>
</TestRun>